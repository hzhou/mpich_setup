if [[ $BASH == "/bin/bash" ]]; then
    color="\[\e[0;32m\]"
    reset="\[\e[0m\]"
    PS1="${color}hostname${reset} \w$ ";
else
    PS1="$ ";
fi
export PS1
export HISTCONTROL=erasedups
export EDITOR='vim'
export GIT_EDITOR='vim +"set tw=72 fo+=w noai"'
DISABLE_AUTO_TITLE=true

PATH=$HOME/bin:$HOME/MPI/bin:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin

MPI=$HOME/MPI
CPATH=$MPI/include
LIBRARY_PATH=$MPI/lib
LD_LIBRARY_PATH=$MPI/lib

export PATH CPATH LIBRARY_PATH LD_LIBRARY_PATH

PERL5LIB=$HOME/lib/perl5
MYDEFLIB=$HOME/lib/MyDef
MYDEFSRC=$HOME/projects/MyDef
export PERL5LIB MYDEFLIB
export MYDEFSRC

export MAKEFLAGS="-j 48"
alias ls="ls --color"
alias grep='grep --color=auto'

#----------------------------------------
export CC=
export CXX=
export F77=
export FC=

function set_gcc9 {
    export LD_LIBRARY_PATH=$HOME/opt/gcc-9/lib64:$LD_LIBRARY_PATH
    export CC=gcc-9
    export CXX=g++-9
    export F77=gfortran-9
    export FC=gfortran-9
}
#----------------------------------------

function clone_git {
    git clone ssh://dragontiger.org/media/Repo/$1.git
}

function mpich_pr {
    cd $HOME/pull_requests
    if [[ "$1" =~ ^\d+$ ]] ; then
        rm -rf mpich$1
        perl $HOME/bin/get_mpich_pr.pl $1
        cd mpich$1
    else
        rm -rf mpich-$1
        git clone -b $1 https://github.com/pmodels/mpich mpich-$1
        cd mpich-$1
    fi
}

function mpich_pr_sync {
    if test -f $1 ; then
        cp -v $1 $HOME/mpich-github/$1
    fi
}

function set_lib {
    if test -d _inst ; then
        rm -f $HOME/MPI
        ln -s $PWD/_inst $HOME/MPI
    elif test -n $1 ; then
        rm -f $HOME/MPI
        ln -s $HOME/opt/$1 $HOME/MPI
    fi
    ls -l $HOME/MPI
}

function set_test {
    echo " --> [test.sh]"
    cat << EOF > test.sh
export MPIR_CVAR_ODD_EVEN_CLIQUES=1
export MPIEXEC_TIMEOUT=30
# export MPITEST_VERBOSE=1
# export MPIR_CVAR_OFI_USE_PROVIDER=sockets
# export MPIR_CVAR_DEBUG_SUMMARY=1
# export MPIR_CVAR_CH4_NUM_VCIS=4
# export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.4

if false; then
    export MPICH_DBG_CLASS=ALL
    export MPICH_DBG_LEVEL=VERBOSE
    export MPICH_DBG_FILENAME="dbg%d@T-%t@.log"
fi

for i in {1..1} ; do
    echo ==== \$i ====
    time mpirun -l -n 1 ./test || exit 1
done
EOF
    echo " --> [.gdbinit]"
    cat << EOF > .gdbinit
set \$_exitcode = -999
break MPIR_Assert_fail

run
if \$_exitcode == -999
    backtrace
end
quit \$_exitcode
EOF
}

alias gitlog='git log -n 30 --format="format:%h %ad %s" --date="format:%m/%d %H:%M"'
alias git-log='git log --stat'
alias gitlist='git show --pretty="" --name-only'
alias gitpick='git cherry-pick'

alias gitri="git rebase -i"
alias git_last_merg="git log -1 --merges --pretty=format:'%h'"
function gitrii {
    local commit=`git log -1 --merges --pretty=format:'%h'`
    git rebase -i $commit
}
function git_reset_last_merge {
    local commit=`git log -1 --merges --pretty=format:'%h'`
    git reset --hard $commit
}
alias gitrc="git rebase --continue"
alias gitra="git commit --amend"
alias gitraa="git commit -a --amend"

WORK=$HOME
MYMAKE=$WORK/mymake
alias mymake="perl $MYMAKE/mymake.pl"
export MODTARBALL="$WORK/modules.tar.gz"

MYCONFIG="--disable-fortran --disable-romio --enable-g=dbg"
alias mymake_ch3="perl $MYMAKE/mymake.pl --with-device=ch3 $MYCONFIG"
alias mymake_ucx="perl $MYMAKE/mymake.pl --with-device=ch4:ucx $MYCONFIG"
alias mymake_ofi="perl $MYMAKE/mymake.pl --with-device=ch4:ofi $MYCONFIG"

alias update_mymake='pushd $MYMAKE && git pull && popd' 

#---------------------------------------- 
export ch4=src/mpid/ch4/src
export ofi=src/mpid/ch4/netmod/ofi
export ucx=src/mpid/ch4/netmod/ucx
export shm=src/mpid/common/shm
export posix=src/mpid/ch4/shm/posix
export ch4am=src/mpid/ch4/generic/am

export dbglog="-mpich-dbg=file -mpich-dbg-level=verbose -mpich-dbg-filename=dbg%d.log"
#---------------------------------------- 
